plugins {
    id 'org.springframework.boot' version "2.1.5.RELEASE"
    id 'java'
    id 'war'
    id 'com.google.cloud.tools.jib' version '1.3.0'
}

apply from: rootProject.file("gradle/dockerjib.gradle")
apply from: rootProject.file("gradle/waroverlay.gradle")
apply from: rootProject.file("gradle/tasks.gradle")

dependencies {
    implementation project(':web')
    implementation 'org.springframework.boot:spring-boot-starter-web'
}

tasks.findByName("jibDockerBuild")
        .dependsOn(copyWebAppIntoJib)
        .finalizedBy(deleteWebAppFromJib)


tasks.findByName("jib")
        .dependsOn(copyWebAppIntoJib)
        .finalizedBy(deleteWebAppFromJib)

war {
    includeWarJars = true
    entryCompression = ZipEntryCompression.STORED
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    configurations {
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    task initSourceFolders {
        sourceSets*.java.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }

        sourceSets*.resources.srcDirs*.each {
            if (!it.exists()) {
                it.mkdirs()
            }
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }
}

project(':data') {
    dependencies {
        implementation project(':comm')
    }
}

project(':client') {
    dependencies {
        implementation project(':comm')
        implementation project(':data')
    }
}

project(':business') {
    dependencies {
        implementation project(':comm')
        implementation project(':data')
        implementation project(':client')
    }
}

project(':web') {
    dependencies {
        implementation project(':comm')
        implementation project(':data')
        implementation project(':client')
        implementation project(':business')
    }
}
